// GooglePlaceAutoCompleteTextField(
//   textEditingController: controller,
//   googleAPIKey: googleAPIKey,
//   inputDecoration: InputDecoration(
//     hintText: "Search for hospitals",
//     prefixIcon: Icon(Icons.search),
//     contentPadding: EdgeInsets.symmetric(vertical: 7, horizontal: 5),
//     fillColor: Color(0xFFF8F8F8),
//     filled: true,
//     enabledBorder: OutlineInputBorder(
//       borderSide: BorderSide(color: Colors.transparent),
//       borderRadius: BorderRadius.circular(10),
//     ),
//     focusedBorder: OutlineInputBorder(
//       borderSide: BorderSide.none,
//       borderRadius: BorderRadius.circular(10),
//     ),
//     border: OutlineInputBorder(
//       borderSide: BorderSide(color: Colors.transparent),
//       borderRadius: BorderRadius.circular(10),
//     ),
//   ),
//   debounceTime: 300,
//   countries: ["in", "us"],
//   isLatLngRequired: true,
//   itemClick: (Prediction prediction) {
//     if (prediction.types != null && prediction.types!.contains('hospital')) {
//       print("Selected Hospital: ${prediction.description}");
//       controller.text = prediction.description ?? '';
//       adre = prediction.description ?? '';
//       FocusScope.of(context).unfocus();
//       fetchPlaceDetails(prediction.placeId!);
//       showBottomSheet(context);
//     }
//   },
//   itemBuilder: (context, index, Prediction prediction) {
//     if (prediction.types != null && prediction.types!.contains('hospital')) {
//       return Container(
//         padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
//         decoration: BoxDecoration(
//           color: Colors.white,
//           border: Border(
//             bottom: BorderSide(color: Colors.grey.shade300),
//           ),
//         ),
//         child: Row(
//           children: [
//             Icon(Icons.local_hospital, color: Colors.red),
//             SizedBox(width: 8),
//             Expanded(
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Text(
//                     prediction.description ?? 'Unknown Hospital',
//                     style: TextStyle(
//                       fontWeight: FontWeight.bold,
//                       fontSize: 14,
//                     ),
//                     overflow: TextOverflow.ellipsis,
//                   ),
//                   if (prediction.structuredFormatting?.mainText != null)
//                     Text(
//                       prediction.structuredFormatting!.mainText ?? '',
//                       style: TextStyle(
//                         color: Colors.grey.shade600,
//                         fontSize: 14,
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       );
//     } else {
//       return SizedBox.shrink();
//     }
//   },
//
// )
//   // Future<void> fetchNearbyHospitals() async {
//   //   if (currentLocation == null) return;
//   //
//   //   final url = Uri.parse(
//   //     'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${currentLocation!.latitude},${currentLocation!.longitude}&radius=30000&type=hospital&key=$googleAPIKey',
//   //   );
//   //
//   //   try {
//   //     final response = await http.get(url);
//   //     if (response.statusCode == 200) {
//   //       final data = json.decode(response.body);
//   //       if (data['status'] == 'OK') {
//   //         List<Marker> hospitalMarkers = [];
//   //         for (var place in data['results']) {
//   //           final LatLng hospitalLocation = LatLng(
//   //             place['geometry']['location']['lat'],
//   //             place['geometry']['location']['lng'],
//   //           );
//   //
//   //           hospitalMarkers.add(
//   //             Marker(
//   //               markerId: MarkerId(place['place_id']),
//   //               position: hospitalLocation,
//   //               infoWindow: InfoWindow(
//   //                 title: place['name'],
//   //                 snippet: place['vicinity'],
//   //               ),
//   //               onTap: () {
//   //                 setState(() {
//   //                   selectedHospital = {
//   //                     'name': place['name'],
//   //                     'vicinity': place['vicinity'],
//   //                     'position': hospitalLocation,
//   //                   };
//   //                   selectedLocation = hospitalLocation;
//   //                 });
//   //                 showBottomSheet(context);
//   //               },
//   //             ),
//   //           );
//   //         }
//   //
//   //         setState(() {
//   //           _hospitalMarkers = hospitalMarkers;
//   //         });
//   //       } else {
//   //         print('Error fetching hospitals: ${data['status']}');
//   //       }
//   //     } else {
//   //       print('Failed to fetch hospitals. HTTP status: ${response.statusCode}');
//   //     }
//   //   } catch (error) {
//   //     print('Error fetching hospitals: $error');
//   //   }
//   // }
//
// // Function to calculate the distance between two coordinates
//   double calculateDistance({
//     required double startLatitude,
//     required double startLongitude,
//     required double endLatitude,
//     required double endLongitude,
//   }) {
//     return Geolocator.distanceBetween(
//       startLatitude,
//       startLongitude,
//       endLatitude,
//       endLongitude,
//     );
//   }
//
//   Future<void> fetchNearbyHospitals() async {
//     if (currentLocation == null) return;
//
//     final url = Uri.parse(
//       'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${currentLocation!.latitude},${currentLocation!.longitude}&radius=100000&type=hospital&key=$googleAPIKey',
//     );
//
//     try {
//       final response = await http.get(url);
//       if (response.statusCode == 200) {
//         final data = json.decode(response.body);
//         if (data['status'] == 'OK') {
//           List<Marker> hospitalMarkers = [];
//           for (var place in data['results']) {
//             final LatLng hospitalLocation = LatLng(
//               place['geometry']['location']['lat'],
//               place['geometry']['location']['lng'],
//             );
//
//             // Calculate the distance of each hospital from the user's location
//             final distance = calculateDistance(
//               startLatitude: currentLocation!.latitude,
//               startLongitude: currentLocation!.longitude,
//               endLatitude: hospitalLocation.latitude,
//               endLongitude: hospitalLocation.longitude,
//             );
//
//             // Only show hospitals within 10 km
//             if (distance <= 100000) {
//               hospitalMarkers.add(
//                 Marker(
//                   markerId: MarkerId(place['place_id']),
//                   position: hospitalLocation,
//                   infoWindow: InfoWindow(
//                     title: place['name'],
//                     snippet: place['vicinity'],
//                   ),
//                   onTap: () {
//                     setState(() {
//                       selectedHospital = {
//                         'name': place['name'],
//                         'vicinity': place['vicinity'],
//                         'position': hospitalLocation,
//                       };
//                       selectedLocation = hospitalLocation;
//                     });
//                     showBottomSheet(context);
//                   },
//                 ),
//               );
//             }
//           }
//
//           setState(() {
//             _hospitalMarkers = hospitalMarkers;
//           });
//         } else {
//           print('Error fetching hospitals: ${data['status']}');
//         }
//       } else {
//         print('Failed to fetch hospitals. HTTP status: ${response.statusCode}');
//       }
//     } catch (error) {
//       print('Error fetching hospitals: $error');
//     }
//   }
//
//   // Future<void> fetchNearbyHospitals() async {
//   //   if (currentLocation == null) return;
//   //
//   //   final url = Uri.parse(
//   //       'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${currentLocation!.latitude},${currentLocation!.longitude}&radius=5000&type=hospital&key=$googleAPIKey');
//   //   try {
//   //     final response = await http.get(url);
//   //     if (response.statusCode == 200) {
//   //       final data = json.decode(response.body);
//   //       if (data['status'] == 'OK') {
//   //         List<Marker> hospitalMarkers = [];
//   //         for (var place in data['results']) {
//   //           final LatLng hospitalLocation = LatLng(
//   //             place['geometry']['location']['lat'],
//   //             place['geometry']['location']['lng'],
//   //           );
//   //           hospitalMarkers.add(
//   //             Marker(
//   //               markerId: MarkerId(place['place_id']),
//   //               position: hospitalLocation,
//   //               infoWindow: InfoWindow(
//   //                 title: place['name'],
//   //                 snippet: place['vicinity'],
//   //               ),
//   //             ),
//   //           );
//   //         }
//   //
//   //         setState(() {
//   //           _hospitalMarkers = hospitalMarkers;
//   //         });
//   //       } else {
//   //         print('Error fetching hospitals: ${data['status']}');
//   //       }
//   //     } else {
//   //       print('Failed to fetch hospitals. HTTP status: ${response.statusCode}');
//   //     }
//   //   } catch (error) {
//   //     print('Error fetching hospitals: $error');
//   //   }
//   // }// Future<void> fetchPlaceDetai(String placeId) async {
//   //   final url = Uri.parse(
//   //     "https://maps.googleapis.com/maps/api/place/details/json?place_id=$placeId&key=$googleAPIKey&type=hospital",
//   //
//   //     // "https://maps.googleapis.com/maps/api/place/details/json?place_id=$placeId&key=$googleAPIKey",
//   //   );
//   //
//   //   try {
//   //     print("clicked after $googleAPIKey");
//   //
//   //     final response = await http.get(url);
//   //     print("clicked after2 $response");
//   //     if (response.statusCode == 200) {
//   //       final data = json.decode(response.body);
//   //       print("clicked after3 $data");
//   //       if (data['status'] == 'OK') {
//   //         final result = data['result'];
//   //         final addressComponents = result['address_components'];
//   //
//   //         // String? country = '';
//   //         // String? state = '';
//   //         // String? city = '';
//   //         // String? pincode = '';
//   //         // double? lat, lng;
//   //
//   //         // Extract details from the response
//   //         for (var component in addressComponents) {
//   //           if (component['types'].contains('country')) {
//   //             country = component['long_name'];
//   //           }
//   //           if (component['types'].contains('administrative_area_level_1')) {
//   //             state = component['long_name'];
//   //           }
//   //           if (component['types'].contains('locality')) {
//   //             city = component['long_name'];
//   //           }
//   //           if (component['types'].contains('postal_code')) {
//   //             pincode = component['long_name'];
//   //           }
//   //         }
//   //
//   //         lat = result['geometry']['location']['lat'];
//   //         lng = result['geometry']['location']['lng'];
//   //
//   //
//   //         // Update UI with the details
//   //         // setState(() {
//   //         //   currentLocation = LatLng(lat!, lng!);
//   //         // });
//   //         setState(() {
//   //           selectedLocation = LatLng(lat!, lng!);
//   //         });
//   //
//   //         if (mapController != null) {
//   //           mapController!.animateCamera(CameraUpdate.newLatLng(LatLng(lat!, lng!)));
//   //         }
//   //
//   //         print("Country: $country");
//   //         print("State: $state");
//   //         print("City: $city");
//   //         print("Pincode: $pincode");
//   //         print("Latitude: $lat");
//   //         print("Longitude: $lng");
//   //       } else {
//   //         setState(() {
//   //           errorMessage = "API Error: ${data['status']}";
//   //         });
//   //         print("clicked $errorMessage");
//   //       }
//   //     } else {
//   //       setState(() {
//   //         errorMessage = "Failed to fetch details. HTTP Status: ${response.statusCode}";
//   //       });
//   //       print("clicked $errorMessage");
//   //     }
//   //   } catch (error) {
//   //     print("Error fetching place details: $error");
//   //   }
//   // }
//   //
//   // // Future<void> fetchPlaceDetail(String placeId) async {
//   // //   setState(() {
//   // //     isLoading = true;
//   // //     errorMessage = null;
//   // //   });
//   // //   print("clicked googleapi $googleAPIKey");
//   // //   print("clicked aft $googleAPIKey");
//   // //   print("clicked aft1 $placeId");
//   // //   final url = Uri.parse(
//   // //     "https://maps.googleapis.com/maps/api/place/details/json?place_id=$placeId&key=$googleAPIKey",
//   // //   );
//   // //
//   // //
//   // //   try {
//   // //     print("clicked after $googleAPIKey");
//   // //
//   // //     final response = await http.get(url);
//   // //     print("clicked after2 $response");
//   // //     if (response.statusCode == 200) {
//   // //       final data = json.decode(response.body);
//   // //       print("clicked after3 $data");
//   // //       if (data['status'] == 'OK') {
//   // //         final result = data['result'];
//   // //         final addressComponents = result['address_components'];
//   // //
//   // //         // String? country = '';
//   // //         // String? state = '';
//   // //         // String? city = '';
//   // //         // String? pincode = '';
//   // //         // double? lat, lng;
//   // //
//   // //         // Extract details from the response
//   // //         for (var component in addressComponents) {
//   // //           if (component['types'].contains('country')) {
//   // //             country = component['long_name'];
//   // //           }
//   // //           if (component['types'].contains('administrative_area_level_1')) {
//   // //             state = component['long_name'];
//   // //           }
//   // //           if (component['types'].contains('locality')) {
//   // //             city = component['long_name'];
//   // //           }
//   // //           if (component['types'].contains('postal_code')) {
//   // //             pincode = component['long_name'];
//   // //           }
//   // //         }
//   // //
//   // //         lat = result['geometry']['location']['lat'];
//   // //         lng = result['geometry']['location']['lng'];
//   // //
//   // //
//   // //         // Update UI with the details
//   // //         // setState(() {
//   // //         //   currentLocation = LatLng(lat!, lng!);
//   // //         // });
//   // //         setState(() {
//   // //           selectedLocation = LatLng(lat!, lng!);
//   // //         });
//   // //
//   // //         if (mapController != null) {
//   // //           mapController!.animateCamera(CameraUpdate.newLatLng(LatLng(lat!, lng!)));
//   // //         }
//   // //
//   // //         print("Country: $country");
//   // //         print("State: $state");
//   // //         print("City: $city");
//   // //         print("Pincode: $pincode");
//   // //         print("Latitude: $lat");
//   // //         print("Longitude: $lng");
//   // //       } else {
//   // //         setState(() {
//   // //           errorMessage = "API Error: ${data['status']}";
//   // //         });
//   // //         print("clicked $errorMessage");
//   // //       }
//   // //     } else {
//   // //       setState(() {
//   // //         errorMessage = "Failed to fetch details. HTTP Status: ${response.statusCode}";
//   // //       });
//   // //       print("clicked $errorMessage");
//   // //     }
//   // //   } catch (error) {
//   // //     setState(() {
//   // //       errorMessage = "An error occurred: $error";
//   // //     });
//   // //     print("clicked $errorMessage");
//   // //   } finally {
//   // //     setState(() {
//   // //       isLoading = false;
//   // //     });
//   // //   }
//   // // }
//   // // void showBottomSheett(BuildContext context) {
//   // //   showModalBottomSheet(
//   // //     context: context,
//   // //     isScrollControlled: true,
//   // //     backgroundColor: Colors.white,
//   // //     shape: RoundedRectangleBorder(
//   // //       borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
//   // //     ),
//   // //     builder: (context) {
//   // //       return DraggableScrollableSheet(
//   // //         initialChildSize: 0.4,
//   // //         minChildSize: 0.3,
//   // //         maxChildSize: 0.8,
//   // //         expand: false,
//   // //         builder: (context, scrollController) {
//   // //           return SingleChildScrollView(
//   // //             controller: scrollController,
//   // //             child: Padding(
//   // //               padding: const EdgeInsets.all(16.0),
//   // //               child: Column(
//   // //                 crossAxisAlignment: CrossAxisAlignment.start,
//   // //                 children: [
//   // //                   Center(
//   // //                     child: Container(
//   // //                       width: 50,
//   // //                       height: 5,
//   // //                       margin: EdgeInsets.only(bottom: 16),
//   // //                       decoration: BoxDecoration(
//   // //                         color: Colors.grey[300],
//   // //                         borderRadius: BorderRadius.circular(10),
//   // //                       ),
//   // //                     ),
//   // //                   ),
//   // //                   Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,
//   // //                     children: [
//   // //                       Text(
//   // //                         "Hospitals",
//   // //                         style: TextStyle(
//   // //                           fontSize: 18,
//   // //                           fontWeight: FontWeight.bold,
//   // //                         ),
//   // //                       ),
//   // //                       Container(
//   // //                         width: 70,
//   // //                         decoration: BoxDecoration(
//   // //                             color:Color(0xFF3E5A96),
//   // //                             borderRadius: BorderRadius.circular(8)
//   // //                         ),
//   // //                         child: Padding(
//   // //                           padding: const EdgeInsets.all(5),
//   // //                           child: Padding(
//   // //                             padding: const EdgeInsets.only(right:2,left: 2),
//   // //                             child: Row(mainAxisAlignment: MainAxisAlignment.center,
//   // //                               children: [
//   // //                                 Icon(Icons.add,color: Colors.white,size: 20,),
//   // //                                 Text('Add',style: TextStyle(fontSize: 14,
//   // //                                     color:Colors.white),),
//   // //                               ],
//   // //                             ),
//   // //                           ),
//   // //                         ),
//   // //                       ),
//   // //                     ],
//   // //                   ),
//   // //
//   // //                   if (selectedHospital != null) ...[
//   // //                     Text(
//   // //                       "Selected Hospital:",
//   // //                       style: TextStyle(
//   // //                         fontSize: 18,
//   // //                         fontWeight: FontWeight.bold,
//   // //                       ),
//   // //                     ),
//   // //                     Text(
//   // //                       selectedHospital!['name'],
//   // //                       style: TextStyle(fontSize: 16),
//   // //                     ),
//   // //                     Text(
//   // //                       selectedHospital!['vicinity'],
//   // //                       style: TextStyle(fontSize: 14, color: Colors.grey),
//   // //                     ),
//   // //                     Divider(),
//   // //                   ],
//   // //                   Text(
//   // //                     "Nearby Hospitals:",
//   // //                     style: TextStyle(
//   // //                       fontSize: 18,
//   // //                       fontWeight: FontWeight.bold,
//   // //                     ),
//   // //                   ),
//   // //                   ListView.builder(
//   // //                     controller: scrollController,
//   // //                     shrinkWrap: true,
//   // //                     itemCount: _hospitalMarkers.length,
//   // //                     itemBuilder: (context, index) {
//   // //                       final marker = _hospitalMarkers[index];
//   // //                       return ListTile(
//   // //                         leading: Icon(Icons.local_hospital),
//   // //                         title: Text(marker.infoWindow.title ?? ''),
//   // //                         subtitle: Text(marker.infoWindow.snippet ?? ''),
//   // //                         onTap: () {
//   // //                           setState(() {
//   // //                             selectedHospital = {
//   // //                               'name': marker.infoWindow.title,
//   // //                               'vicinity': marker.infoWindow.snippet,
//   // //                               'position': marker.position,
//   // //                             };
//   // //                           });
//   // //                           Navigator.pop(context); // Close the sheet
//   // //                           showBottomSheet(context); // Show updated sheet
//   // //                         },
//   // //                       );
//   // //                     },
//   // //                   ),
//   // //                 ],
//   // //               ),
//   // //             ),
//   // //           );
//   // //         },
//   // //       );
//   // //     },
//   // //   );
//   // // }
// void showBottomSheet(BuildContext context) {
//   showModalBottomSheet(
//     context: context,
//     isScrollControlled: true,
//     backgroundColor: Colors.white,
//     shape: RoundedRectangleBorder(
//       borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
//     ),
//     builder: (context) {
//       return DraggableScrollableSheet(
//         initialChildSize: 0.3, // 40% of screen height
//         minChildSize: 0.2, // Minimum height
//         maxChildSize: 0.7, // Maximum height
//         expand: false,
//         builder: (context, scrollController) {
//           return SingleChildScrollView(
//             controller: scrollController,
//             child: Padding(
//               padding: const EdgeInsets.all(16.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: [
//                   Center(
//                     child: Container(
//                       width: 50,
//                       height: 5,
//                       margin: EdgeInsets.only(bottom: 16),
//                       decoration: BoxDecoration(
//                         color: Colors.grey[300],
//                         borderRadius: BorderRadius.circular(10),
//                       ),
//                     ),
//                   ),
//                   Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                     children: [
//                       Text(
//                         "Nearby Hospitals",
//                         style: TextStyle(
//                           fontSize: 20,
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                       Container(
//                         width: 70,
//                         decoration: BoxDecoration(
//                             color:Color(0xFF3E5A96),
//                             borderRadius: BorderRadius.circular(8)
//                         ),
//                         child: Padding(
//                           padding: const EdgeInsets.all(5),
//                           child: Padding(
//                             padding: const EdgeInsets.only(right:2,left: 2),
//                             child: Row(mainAxisAlignment: MainAxisAlignment.center,
//                               children: [
//                                 Icon(Icons.add,color: Colors.white,size: 20,),
//                                 Text('Add',style: TextStyle(fontSize: 14,
//                                     color:Colors.white),),
//                               ],
//                             ),
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                   SizedBox(height: 8),
//                   Text(
//                     "$adre",
//                     style: TextStyle(fontSize: 16),
//                   ),
//                   Text(
//                     "$city,$state,\n$pincode,$city",
//                     style: TextStyle(fontSize: 16),
//                   ),
//                   SizedBox(height: 16),
//                   // ListView.builder(
//                   //   controller: scrollController,
//                   //   shrinkWrap: true,
//                   //   itemCount: 10,
//                   //   itemBuilder: (context, index) {
//                   //     return ListTile(
//                   //       leading: Icon(Icons.local_hospital),
//                   //       title: Text("Hospital ${index + 1}"),
//                   //       subtitle: Text("Details about Hospital ${index + 1}"),
//                   //       onTap: () {
//                   //         Navigator.pop(context);
//                   //       },
//                   //     );
//                   //   },
//                   // ),
//                 ],
//               ),
//             ),
//           );
//         },
//       );
//     },
//   );
// }

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:google_places_flutter/google_places_flutter.dart';
import 'package:google_places_flutter/model/prediction.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'Add_Organization.dart';
class PlaceSearchScreen extends StatefulWidget {
  @override
  _PlaceSearchScreenState createState() => _PlaceSearchScreenState();
}
class _PlaceSearchScreenState extends State<PlaceSearchScreen> {
  final TextEditingController controller = TextEditingController();
  final String googleAPIKey = "AIzaSyAw0EydfzzDzXv3tq5IJO9Fd07_K11Td3M";
  GoogleMapController? mapController;
  LatLng? currentLocation;
  LatLng? selectedLocation;
  bool isLoading = false;
  bool isVisible = false;
  String? errorMessage;
  String? country = '';
  String? state = '';
  String? city = '';
  String? pincode = '';
  double? lat, lng;
  var selected_latitude;
  var selected_longitude;
  var hospitalData;
  LatLng? cameraPosition;
  bool isMapDragged = false;
  BitmapDescriptor? customIcon;
  final String imageUrl = 'https://cardiolabshealthcare.com//files/Hospital.png';
  Future<void> loadIcon() async {
    try {
      final http.Response response = await http.get(Uri.parse(imageUrl));
      if (response.statusCode == 200) {
        final Uint8List imageData = response.bodyBytes;

        final ui.Codec codec = await ui.instantiateImageCodec(
          imageData,
          targetHeight: 62,
          targetWidth: 62,
        );
        final ui.FrameInfo fi = await codec.getNextFrame();

        final ByteData? byteData =
        await fi.image.toByteData(format: ui.ImageByteFormat.png);

        if (byteData != null) {
          setState(() {
            customIcon = BitmapDescriptor.fromBytes(byteData.buffer.asUint8List());
          });
          print('Icon loaded successfully!');
          _setCurrentLocation();
        }
      } else {
        print('Failed to load image from $imageUrl: ${response.statusCode}');
      }
    } catch (e) {
      print('Error loading icon from $imageUrl: $e');
    }
  }
  Future<void> _setCurrentLocation() async {
    try {
      // Check location services
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print("Location services are disabled.");
        return;
      }

      // Check and request permissions
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied ||
          permission == LocationPermission.deniedForever) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied ||
            permission == LocationPermission.deniedForever) {
          print("Location permissions are denied.");
          return;
        }
      }

      // Fetch current location
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );

      setState(() {
        currentLocation = LatLng(position.latitude, position.longitude);
        print('Current location.: $currentLocation');

      });

      print('Current location: $currentLocation');

      // Animate camera if mapController is available
      if (mapController != null && currentLocation != null) {
        mapController!.animateCamera(
          CameraUpdate.newLatLng(currentLocation!),
        );
      } else {
        print("MapController or CurrentLocation is null.");
      }
    } catch (e) {
      print("Error while fetching location: $e");
    }
  }
  Map<String, dynamic>? selectedHospital;
  List<Marker> _hospitalMarkers = [];
  Map<String, dynamic> standardizeHospitalData(Map<String, dynamic> place, {
    String? phoneNumber,
    String? city,
    String? state,
    String? country,
    String? district,
    String? pincode,
    String? neighborhood,
    String? streetName,
    String? firstAddressLine,
    String? secondAddressLine,
    double? lat,
    double? lng,
  }) {
    // String? phoneNumber = details['formatted_phone_number'];
    String vicinity = place['vicinity'] ?? place['formatted_address'] ?? 'No address available';

    return {
      'name': place['name'] ?? 'Unknown Hospital',
      'vicinity': vicinity,
      'phoneNumber': phoneNumber ?? '',
      'city': city ?? '',
      'state': state ?? '',
      'country': country ?? '',
      'district': district ?? '',
      'pincode': pincode ?? '',
      'neighborhood': neighborhood ?? '',
      'streetName': streetName ?? '',
      'lat': lat ?? 0.0,
      'lng': lng ?? 0.0,
      'firstAddressLine': firstAddressLine ?? '',
      'secondAddressLine': secondAddressLine ?? '',
    };
  }
  Future<void>fetchNearbyHospitals(double sliderValue) async {
    if (currentLocation == null) return;
    double radius = sliderValue * 1000;
    final url = Uri.parse(
      'https://maps.googleapis.com/maps/api/place/nearbysearch/json'
          '?location=${selected_latitude ?? currentLocation?.latitude},${selected_longitude ?? currentLocation?.longitude}'
          '&radius=$radius&type=hospital&key=$googleAPIKey',
    );
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['status'] == 'OK') {
          List<Marker> hospitalMarkers = [];
          for (var place in data['results']) {
            final LatLng hospitalLocation = LatLng(
              place['geometry']['location']['lat'],
              place['geometry']['location']['lng'],
            );

            final placeDetailsUrl = Uri.parse(
              'https://maps.googleapis.com/maps/api/place/details/json'
                  '?place_id=${place['place_id']}&key=$googleAPIKey',
            );

            final placeDetailsResponse = await http.get(placeDetailsUrl);
            if (placeDetailsResponse.statusCode == 200) {
              final placeDetailsData = json.decode(placeDetailsResponse.body);

              if (placeDetailsData['status'] == 'OK') {
                final details = placeDetailsData['result'];

                // Extract additional data
                String? phoneNumber = details['formatted_phone_number'];
                String? country;
                String? state;
                String? city;
                String? district;
                String? pincode;
                String? neighborhood;
                String? streetName;
                String? firstAddressLine;
                String? secondAddressLine;

                // Extract address components dynamically
                for (var component in details['address_components'] ?? []) {
                  if (component['types'].contains('country')) {
                    country = component['long_name'];
                  } else if (component['types'].contains('administrative_area_level_1')) {
                    state = component['long_name'];
                  } else if (component['types'].contains('locality')) {
                    city = component['long_name'];
                  } else if (component['types'].contains('administrative_area_level_2')) {
                    district = component['long_name'];
                  } else if (component['types'].contains('postal_code')) {
                    pincode = component['long_name'];
                  } else if (component['types'].contains('neighborhood')) {
                    neighborhood = component['long_name'];
                  } else if (component['types'].contains('route')) {
                    streetName = component['long_name'];
                  }
                }

                firstAddressLine = [streetName, neighborhood]
                    .where((e) => e != null && e.isNotEmpty)
                    .join(', ');

                secondAddressLine = [city, district, state, country]
                    .where((e) => e != null && e.isNotEmpty)
                    .join(', ');

                // Default values if address lines are still empty
                firstAddressLine = firstAddressLine.isNotEmpty ? firstAddressLine : 'Not available';
                secondAddressLine = secondAddressLine.isNotEmpty ? secondAddressLine : 'Not available';

                // Standardize hospital data
                 hospitalData = standardizeHospitalData(
                  place,
                  phoneNumber: phoneNumber,
                  city: city,
                  state: state,
                  country: country,
                  district: district,
                  pincode: pincode,
                  neighborhood: neighborhood,
                  streetName: streetName,
                  firstAddressLine: firstAddressLine,
                  secondAddressLine: secondAddressLine,
                  lat: hospitalLocation.latitude,
                  lng: hospitalLocation.longitude,
                );

                hospitalMarkers.add(
                  Marker(
                    markerId: MarkerId(place['place_id']),
                    position: hospitalLocation,
                    icon: customIcon ?? BitmapDescriptor.defaultMarker,
                    infoWindow: InfoWindow(
                      title: place['name'],
                      snippet: hospitalData['vicinity'],

                    ),
                    // onTap: () {
                    //   setState(() {
                    //     selectedHospital = {
                    //       'name': details['name'] ?? 'Unknown',
                    //       'vicinity': details['vicinity'] ?? 'Not available',
                    //       'phone_number': phoneNumber ?? 'Not available',
                    //       'first_address_line': firstAddressLine,
                    //       'second_address_line': secondAddressLine,
                    //       'latitude': hospitalLocation.latitude,
                    //       'longitude': hospitalLocation.longitude,
                    //     };
                    //   });
                    //   showBottomSheet(context);
                    // },
                    onTap: () {
                      print("Marker tapped! $hospitalData");
                        setState(() {
                        selectedHospital = hospitalData;
                      });
                      print(';;;;;;search ..hopital datat $selectedHospital');

                      showBottomSheet(context);
                    },
                  ),
                );
              }
            } else {
              print('Failed to fetch details for: ${place['name']}');
            }
          }
          setState(() {
            _hospitalMarkers = hospitalMarkers;
          });
        } else {
          print('Error fetching hospitals: ${data['status']}');
        }
      } else {
        print('Failed to fetch hospitals. HTTP status: ${response.statusCode}');
      }
    } catch (error) {
      print('Error fetching hospitals: $error');
    }
  }
  Future<void>fetchPlaceDetails(String placeId) async {
    final url = Uri.parse(
      "https://maps.googleapis.com/maps/api/place/details/json?place_id=$placeId&key=$googleAPIKey&type=hospital",
    );

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        if (data['status'] == 'OK') {
          final result = data['result'];
          final addressComponents = result['address_components'];
          String? phoneNumber = result['formatted_phone_number'];
          String? country;
          String? state;
          String? city;
          String? district;
          String? pincode;
          String? neighborhood;
          String? streetName;
          String? firstAddressLine;
          String? secondAddressLine;

          for (var component in addressComponents) {
            if (component['types'].contains('country')) {
              country = component['long_name'];
            }
            if (component['types'].contains('administrative_area_level_1')) {
              state = component['long_name'];
            }
            if (component['types'].contains('locality')) {
              city = component['long_name'];
            }
            if (component['types'].contains('administrative_area_level_2')) {
              district = component['long_name'];
            }
            if (component['types'].contains('postal_code')) {
              pincode = component['long_name'];
            }
            if (component['types'].contains('neighborhood')) {
              neighborhood = component['long_name'];
            }
            if (component['types'].contains('route')) {
              streetName = component['long_name'];
            }
          }

          if (result['formatted_address'] != null) {
            List<String> addressLines = result['formatted_address'].split(',');
            firstAddressLine = addressLines.isNotEmpty ? addressLines[0].trim() : '';
            secondAddressLine = addressLines.length > 1 ? addressLines[1].trim() : '';
          }

          final lat = result['geometry']['location']['lat'];
          final lng = result['geometry']['location']['lng'];

          setState(() {
            selectedLocation = LatLng(lat!, lng!);

            selectedHospital = standardizeHospitalData(
              result,
              phoneNumber: phoneNumber,
              city: city,
              state: state,
              country: country,
              district: district,
              pincode: pincode,
              neighborhood: neighborhood,
              streetName: streetName,
              firstAddressLine: firstAddressLine,
              secondAddressLine: secondAddressLine,
              lat: lat,
              lng: lng,
            );
            print(';;;;;;search ..hopital datat $selectedHospital');
          });

          if (mapController != null) {
            mapController!.animateCamera(CameraUpdate.newLatLng(LatLng(lat!, lng!)));
            selected_latitude = '$lat';
            selected_longitude = '$lng';
          }

          fetchNearbyHospitals(sliderValue);
        }
      }
    } catch (error) {
      print("Error fetching place details: $error");
    }
  }
  void showBottomSheet(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      elevation: 0,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setBottomSheetState) {
            return DraggableScrollableSheet(
              initialChildSize: 0.6,
              minChildSize: 0.5,
              maxChildSize: 0.8,
              expand: false,
              builder: (context, scrollController) {
                return Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Center(
                        child: Container(
                          width: 50,
                          height: 5,
                          margin: EdgeInsets.only(bottom: 16),
                          decoration: BoxDecoration(
                            color: Colors.grey[300],
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                      if (selectedHospital != null) ...[

                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Create Organization:",
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            InkWell(
                              onTap: () {
                                Navigator.push(context,
                                    MaterialPageRoute(builder: (context)=>neworgan(selectedHospital:selectedHospital))
                                );
                              },
                              child: Container(
                                width: 65,
                                decoration: BoxDecoration(
                                    color: Color(0xFF3E5A96),
                                    borderRadius: BorderRadius.circular(8)),
                                child: Padding(
                                  padding: const EdgeInsets.all(5),
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.add,
                                        color: Colors.white,
                                        size: 20,
                                      ),
                                      Text(
                                        'Add',
                                        style: TextStyle(
                                            fontSize: 14, color: Colors.white),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        Text(
                          selectedHospital!['name'],
                          style: TextStyle(fontSize: 16),
                        ),
                        Text(
                          selectedHospital!['vicinity'],
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                        Text(
                          "${selectedHospital!['phone_number'] ?? ''}",
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),

                        Divider(
                          color: Colors.grey,      // Customize the color
                          thickness: 0.8,          // Set the thickness
                          height: 5,            // Space around the divider
                          indent: 2,            // Space from the leading edge
                        ),

                        // Divider(),
                      ],
                      Text(
                        "Nearby Hospitals:",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Expanded(
                        child: ListView.builder(
                          controller: scrollController,
                          itemCount: _hospitalMarkers.length,
                          itemBuilder: (context, index) {
                            final marker = _hospitalMarkers[index];
                            return ListTile(
                              leading: Icon(Icons.local_hospital, color: Colors.red),
                              title: Text(marker.infoWindow.title ?? ''),
                              subtitle: Text(marker.infoWindow.snippet ?? ''),
                              onTap: () {
                                setBottomSheetState(() {
                                  selectedHospital = {
                                    'name': marker.infoWindow.title,
                                    'vicinity': marker.infoWindow.snippet,
                                    'position': marker.position,
                                    'city': hospitalData['city'],
                                    'state': hospitalData['state'],
                                    'country': hospitalData['country'],
                                    'district': hospitalData['district'],
                                    'postal_code': hospitalData['pincode'],
                                    'phone_number': hospitalData.containsKey('phoneNumber')
                                        ? hospitalData['phoneNumber']
                                        : '',
                                    // 'phone_number': hospitalData['phone_number'],
                                    'first_address_line': hospitalData['firstAddressLine'],
                                    'second_address_line': hospitalData['secondAddressLine'],
                                  };
                                });
                                print('Selected Hospital: ${selectedHospital}');
                                mapController?.animateCamera(CameraUpdate.newLatLng(marker.position));
                                Navigator.pop(context);
                                showBottomSheet(context);

                              },
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        );
      },
    );
  }

  // Future<void> fetchPlaceDetails(String placeId) async {
  //   final url = Uri.parse(
  //     "https://maps.googleapis.com/maps/api/place/details/json?place_id=$placeId&key=$googleAPIKey&type=hospital",
  //   );
  //
  //   try {
  //     print("clicked after $googleAPIKey");
  //
  //     final response = await http.get(url);
  //     print("clicked after2 $response");
  //
  //     if (response.statusCode == 200) {
  //       final data = json.decode(response.body);
  //       print("clicked after3 $data");
  //
  //       if (data['status'] == 'OK') {
  //         final result = data['result'];
  //         final addressComponents = result['address_components'];
  //         String? phoneNumber = result['formatted_phone_number'];
  //         String? country;
  //         String? state;
  //         String? city;
  //         String? pincode;
  //         String? firstAddressLine;
  //         String? secondAddressLine;
  //
  //         // Extract details from the response
  //         for (var component in addressComponents) {
  //           if (component['types'].contains('country')) {
  //             country = component['long_name'];
  //           }
  //           if (component['types'].contains('administrative_area_level_1')) {
  //             state = component['long_name'];
  //           }
  //           if (component['types'].contains('locality')) {
  //             city = component['long_name'];
  //           }
  //           if (component['types'].contains('postal_code')) {
  //             pincode = component['long_name'];
  //           }
  //         }
  //
  //         if (result['formatted_address'] != null) {
  //           List<String> addressLines = result['formatted_address'].split(',');
  //           firstAddressLine = addressLines.isNotEmpty ? addressLines[0].trim() : '';
  //           secondAddressLine = addressLines.length > 1 ? addressLines[1].trim() : '';
  //         }
  //         final lat = result['geometry']['location']['lat'];
  //         final lng = result['geometry']['location']['lng'];
  //
  //         // Update the location with the fetched coordinates
  //         setState(() {
  //           selectedLocation = LatLng(lat!, lng!);
  //           selectedHospital = {
  //             'name': result['name'] ?? 'Unknown Hospital',
  //             'vicinity': result['formatted_address'] ?? 'No address available',
  //             'phoneNumber':phoneNumber ?? 'Not available',
  //             'city': city,
  //             'state': state,
  //             'country': country,
  //             'pincode': pincode,
  //             'lat': lat,
  //             'lng': lng,
  //             'firstAddressLine': firstAddressLine,
  //             'secondAddressLine': secondAddressLine,
  //           };
  //         });
  //
  //         if (mapController != null) {
  //           mapController!.animateCamera(CameraUpdate.newLatLng(LatLng(lat!, lng!)));
  //           selected_latitude='$lat';
  //           selected_longitude='$lng';
  //         }
  //         fetchNearbyHospitals(sliderValue);
  //         showBottomSheet(context);
  //
  //
  //       } else {
  //         setState(() {
  //           errorMessage = "API Error: ${data['status']}";
  //         });
  //         print("clicked $errorMessage");
  //       }
  //     } else {
  //       setState(() {
  //         errorMessage = "Failed to fetch details. HTTP Status: ${response.statusCode}";
  //       });
  //       print("clicked $errorMessage");
  //     }
  //   } catch (error) {
  //     print("Error fetching place details: $error");
  //   }
  // }
  // void showBottomSheet(BuildContext context) {
  //   showModalBottomSheet(
  //     context: context,
  //     isScrollControlled: true,
  //     backgroundColor: Colors.white,
  //     shape: RoundedRectangleBorder(
  //       borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
  //     ),
  //     builder: (context) {
  //       return StatefulBuilder(
  //         builder: (BuildContext context, StateSetter setBottomSheetState) {
  //           return DraggableScrollableSheet(
  //             initialChildSize: 0.4,
  //             minChildSize: 0.4,
  //             maxChildSize: 0.8,
  //             expand: false,
  //             builder: (context, scrollController) {
  //               return Padding(
  //                 padding: const EdgeInsets.all(16.0),
  //                 child: Column(
  //                   crossAxisAlignment: CrossAxisAlignment.start,
  //                   children: [
  //                     Center(
  //                       child: Container(
  //                         width: 50,
  //                         height: 5,
  //                         margin: EdgeInsets.only(bottom: 16),
  //                         decoration: BoxDecoration(
  //                           color: Colors.grey[300],
  //                           borderRadius: BorderRadius.circular(10),
  //                         ),
  //                       ),
  //                     ),
  //                     if (selectedHospital != null) ...[
  //                       Row(
  //                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
  //                         children: [
  //                           Text(
  //                             "Create Organization:",
  //                             style: TextStyle(
  //                               fontSize: 18,
  //                               fontWeight: FontWeight.bold,
  //                             ),
  //                           ),
  //                           InkWell(onTap: (){},
  //                             child: Container(
  //                               width: 65,
  //                               decoration: BoxDecoration(
  //                                   color: Color(0xFF3E5A96),
  //                                   borderRadius: BorderRadius.circular(8)),
  //                               child: Padding(
  //                                 padding: const EdgeInsets.all(5),
  //                                 child: Row(
  //                                   mainAxisAlignment: MainAxisAlignment.center,
  //                                   children: [
  //                                     Icon(
  //                                       Icons.add,
  //                                       color: Colors.white,
  //                                       size: 20,
  //                                     ),
  //                                     Text(
  //                                       'Add',
  //                                       style: TextStyle(
  //                                           fontSize: 14, color: Colors.white),
  //                                     ),
  //                                   ],
  //                                 ),
  //                               ),
  //                             ),
  //                           ),
  //                         ],
  //                       ),
  //                       Text(
  //                         selectedHospital!['name'],
  //                         style: TextStyle(fontSize: 16),
  //                       ),
  //                       Text(
  //                         selectedHospital!['vicinity'],
  //                         style: TextStyle(fontSize: 14, color: Colors.grey),
  //                       ),
  //                       Divider(),
  //                     ],
  //                     Text(
  //                       "Nearby Hospitals:",
  //                       style: TextStyle(
  //                         fontSize: 18,
  //                         fontWeight: FontWeight.bold,
  //                       ),
  //                     ),
  //                     Expanded(
  //                       child: ListView.builder(
  //                         controller: scrollController,
  //                         itemCount: _hospitalMarkers.length,itemBuilder: (context, index) {
  //                         if (index >= _hospitalMarkers.length) {
  //                               return SizedBox
  //                                   .shrink();
  //                             }
  //                             final marker = _hospitalMarkers[index];
  //                             return ListTile(
  //                               leading: Icon(Icons.local_hospital,
  //                                   color: Colors.red),
  //                               title: Text(marker.infoWindow.title ?? ''),
  //                               subtitle: Text(marker.infoWindow.snippet ?? ''),
  //                               onTap: () {
  //                                 setBottomSheetState(() {
  //                                   selectedHospital = {
  //                                     'name': marker.infoWindow.title,
  //                                     'vicinity': marker.infoWindow.snippet,
  //                                     'position': marker.position,
  //                                     'postal_code ':pincode
  //
  //                                   };
  //                                 });
  //                               },
  //                             );
  //                           }
  //
  //                           // itemBuilder: (context, index) {
  //               //             final marker = _hospitalMarkers[index];
  //               //             return ListTile(
  //               //               leading: Icon(Icons.local_hospital, color: Colors.red),
  //               //               title: Text(marker.infoWindow.title ?? ''),
  //               //               subtitle: Text(marker.infoWindow.snippet ?? ''),
  //               //               onTap: () {
  //               //                 setBottomSheetState(() {
  //               //                   selectedHospital = {
  //               //                     'name': marker.infoWindow.title,
  //               //                     'vicinity': marker.infoWindow.snippet,
  //               //                     'position': marker.position,
  //               //                   };
  //               //                 });
  //               //               },
  //               //             );
  //               //           },
  //                       ),
  //                     ),
  //                   ],
  //                 ),
  //               );
  //             },
  //           );
  //         },
  //       );
  //     },
  //   );
  // }
  final List<String> ranges = [
    "1 - 5 km",
    "6 - 10 km",
    "11 - 15 km",
    "16 - 20 km",
    "21 - 25 km",
    "26 - 30 km",
    "31 - 35 km",
    "36 - 40 km",
  ];
  double sliderValue = 1;
  // @override
  // void initState() {
  //   // TODO: implement initState
  //   super.initState();
  //   print ('.cgecj ghhdg');
  //   Future.delayed(Duration(milliseconds:20), () {
  //     _setCurrentLocation().then((_) {
  //       fetchNearbyHospitals(sliderValue);
  //       loadIcon();
  //     });
  //     print ('.inside');
  //     Future.delayed(Duration(seconds: 15), () {
  //       showBottomSheet(context);
  //     });
  //   });
  // }
  @override
  void initState() {
    super.initState();
    print('.Initializing...');

    WidgetsBinding.instance.addPostFrameCallback((_) {
      initializePage();
    });
    controller.addListener(() {
      setState(() {});
    });
  }
  void initializePage() async {
    try {
      print('.Start Initialization');

      // Step 1: Set the user's current location
      await _setCurrentLocation();
      print('.Location set to: $currentLocation');

      // Step 2: Fetch nearby hospitals based on initial location
      fetchNearbyHospitals(sliderValue);
      print('.Fetched nearby hospitals');

      // Step 3: Load custom icons (if any)
      await loadIcon();
      print('.Loaded custom icons');

      // Step 4: Show the bottom sheet after a delay
      Future.delayed(Duration(seconds: 15), () {
        if (mounted) {
          print('.Showing bottom sheet');
          showBottomSheet(context);
        }
      });

    } catch (e) {
      print('Error during initialization: $e');
    }
  }
  // @override
  // void initState() {
  //   super.initState();
  //   print('.cgecj ghhdg');
  //
  //   _initializeApp();
  // }
  // Future<void> _initializeApp()  async {
  //    await _setCurrentLocation();
  //   print('..........ceck location');
  //   fetchNearbyHospitals(sliderValue);
  //   loadIcon();
  //
  //   // Show bottom sheet after a short delay (if needed)
  //   Future.delayed(const Duration(seconds: 6), () {
  //     if (currentLocation != null) {
  //       showBottomSheet(context);
  //     }
  //   });
  // }
  Widget build(BuildContext context) {
    return Scaffold(
      // appBar: PreferredSize(
      //   preferredSize: Size.fromHeight(appBarHeight),
      //   child: AppBar(
      //     title: InkWell(onTap: (){
      //       Navigator.push(context, MaterialPageRoute(builder: (context)=>CustomInfoWindowScreen()));
      //     },
      //       child: Text(
      //         'Create Organization',
      //         style: TextStyle(fontWeight: FontWeight.w600, fontSize: 18),
      //       ),
      //     ),
      //     actions: [
      //       InkWell(onTap: (){
      //         Navigator.push(context,
      //             MaterialPageRoute(builder: (context)=>neworgan(selectedHospital:null))
      //         );
      //       },
      //         child: Padding(
      //           padding: const EdgeInsets.only(right: 10),
      //           child: Container(
      //             // width: 83,
      //             // width: 82,
      //             decoration: BoxDecoration(
      //               color: Color(0xFF3E5A96),
      //               borderRadius: BorderRadius.circular(8),
      //             ),
      //             child: Padding(
      //               padding: const EdgeInsets.all(6),
      //               child: Row(
      //                 mainAxisAlignment: MainAxisAlignment.center,
      //                 children: [
      //                   Icon(
      //                     Icons.add,
      //                     color: Colors.white,
      //                     size: 13,
      //                   ),
      //                   Text(
      //                     'Add Manual',
      //                     style: TextStyle(
      //                       fontSize: 12,
      //                       color: Colors.white,
      //                     ),
      //                     overflow: TextOverflow.ellipsis,
      //                     maxLines: 1, // Ensure one line
      //                   ),
      //                 ],
      //               ),
      //             ),
      //           ),
      //         ),
      //       ),
      //       // IconButton(
      //       //   icon: Icon(
      //       //     isVisible ? Icons.keyboard_arrow_up_outlined : Icons.keyboard_arrow_down_outlined,
      //       //   ),
      //       //   onPressed: () {
      //       //     setState(() {
      //       //       isVisible = !isVisible;
      //       //     });
      //       //   },
      //       // ),
      //     ],
      //     bottom: PreferredSize(
      //       preferredSize: Size.fromHeight(0),
      //       child: Row(mainAxisAlignment: MainAxisAlignment.start,
      //         children: [
      //           Container(
      //             width: MediaQuery.of(context).size.width/1.2,
      //             child: Padding(
      //               padding: const EdgeInsets.symmetric(horizontal: 2, vertical:0.5),
      //               child: Slider(
      //                 value: sliderValue,
      //                 min: 0,
      //                 max: (ranges.length - 1).toDouble(),
      //                 // divisions: ranges.length - 1,
      //                 label: ranges[sliderValue.round()],
      //                 activeColor: Color(0xFF3E5A96),
      //                 inactiveColor: Colors.grey.withOpacity(0.5),
      //                 onChanged: (value) {
      //                   setState(() {
      //                     sliderValue = value;
      //                   });
      //                 },
      //                 onChangeEnd: (value) async {
      //                   setState(() {
      //                     sliderValue = value.roundToDouble();
      //                   });
      //                   await _setCurrentLocation().then((_) {
      //                     fetchNearbyHospitals(sliderValue);
      //                     showBottomSheet(context);
      //
      //                   });
      //                 },
      //
      //               ),
      //             ),
      //           ),
      //           Column(
      //             crossAxisAlignment: CrossAxisAlignment.start,
      //             children:[
      //               Text(
      //                 "Nearby",
      //                 style: TextStyle(
      //                   fontSize: 12,
      //                   fontWeight: FontWeight.bold,
      //                   color: Colors.black,
      //                 ),
      //               ),
      //               Text(
      //                 "$selectedRange",
      //                 style: TextStyle(
      //                   fontSize: 12,
      //                   fontWeight: FontWeight.bold,
      //                   color: Color(0xFF3E5A96),
      //                 ),
      //               ),
      //             ],
      //           )
      //
      //         ],
      //       ),
      //     )
      //   ),
      // ),
      body: currentLocation == null
          ?Container(
        alignment: Alignment.center,
        padding: EdgeInsets.all(16.0),
        child: LoadingAnimationWidget.discreteCircle(
          color: Color(0xFF3E5A96),
          size: 30,
          secondRingColor: Colors.purple,
        ),
      )
          :Stack(
          children: [
          GoogleMap(
            initialCameraPosition: CameraPosition(
              target: currentLocation!,
              zoom: 15,
            ),
            myLocationEnabled: true,
            myLocationButtonEnabled: false,
            compassEnabled: true,
            zoomControlsEnabled: false,
            onMapCreated: (controller) {
              mapController = controller;
              mapController?.animateCamera(
                CameraUpdate.newLatLng(currentLocation!),
              );
            },
            onCameraMove: (CameraPosition position) {
              setState(() {
                currentLocation = position.target;
                isMapDragged = true;
              });
            },
            onCameraIdle: () {
              if (currentLocation != null) {
                fetchNearbyHospitals(10);  // 30 km radius
              }
              print("Camera idle at position: $currentLocation");
            },
            markers: Set<Marker>.of([
              if (selectedLocation != null)
                Marker(
                  markerId: MarkerId("selectedHospital"),
                  position: selectedLocation!,
                  icon: customIcon ?? BitmapDescriptor.defaultMarker,
                  onTap: () {
                    print("Marker tapped!");
                    showBottomSheet(context);
                  },
                ),
              ..._hospitalMarkers,
            ]),
          ),
          Positioned(
            top: 35,
            left: 8,
            right:8,
            child: Column(crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Theme( data: Theme.of(context).copyWith(
                  textSelectionTheme: TextSelectionThemeData(
                    cursorColor: Colors.black,
                  ),
                ),
                  child: GooglePlaceAutoCompleteTextField(
                    textEditingController: controller,
                    googleAPIKey: googleAPIKey,
                    inputDecoration: InputDecoration(
                      hintText: 'Search here',
                      prefixIcon: Padding(
                        padding:  EdgeInsets.all(10),
                        child: Image.asset('assets/map.png',
                          height: 2,
                          width: 3,

                          // fit: BoxFit.contain,
                        ),
                      ),

                      suffixIcon:controller.text.isNotEmpty
                          ?IconButton(
                        icon:Icon(Icons.clear,size: 18,color:Colors.black,),
                        onPressed:(){
                          controller.clear();
                          setState((){});
                        },
                      ):Icon(Icons.person,size: 18,color:Colors.black,),
                      isDense: true,
                      fillColor: Color(0xFFF8F8F8),
                      filled: true,
                      enabledBorder: OutlineInputBorder(
                        borderSide: BorderSide(color: Colors.transparent),
                        borderRadius: BorderRadius.circular(30),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderSide: BorderSide.none,
                        borderRadius: BorderRadius.circular(30),
                      ),
                      border: OutlineInputBorder(
                        borderSide: BorderSide(color: Color(0xFF3E5A96)),
                        borderRadius: BorderRadius.circular(30),
                      ),
                    ),
                    debounceTime: 20,
                    countries: ["in", "us"],
                    isLatLngRequired: true,
                    // itemClick: (Prediction prediction) {
                    //   if (prediction.types != null && prediction.types!.contains('hospital')) {
                    //     print("Selected Hospital: ${prediction.description}");
                    //     controller.text = prediction.description ?? '';
                    //     selectedHospital = {
                    //       'name': prediction.structuredFormatting?.mainText ?? 'Unknown Hospital',
                    //       'vicinity': prediction.description ?? '',
                    //     };
                    //     SystemChannels.textInput.invokeMethod('TextInput.hide');
                    //     FocusScope.of(context).unfocus();
                    //     fetchPlaceDetails(prediction.placeId!);
                    //     fetchNearbyHospitals(sliderValue);
                    //     showBottomSheet(context);
                    //   }
                    // },
                    // itemBuilder: (context, index, Prediction prediction) {
                    //   if (prediction.types != null && prediction.types!.contains('hospital')) {
                    //     return Container(
                    //       padding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                    //       decoration: BoxDecoration(
                    //         color: Colors.white,
                    //         border: Border(
                    //           bottom: BorderSide(color: Colors.grey.shade300),
                    //         ),
                    //       ),
                    //       child: Row(
                    //         children: [
                    //           Icon(Icons.local_hospital, color: Colors.red),
                    //           SizedBox(width: 8),
                    //           Expanded(
                    //             child: Column(
                    //               crossAxisAlignment: CrossAxisAlignment.start,
                    //               children: [
                    //                 Text(
                    //                   prediction.description ?? 'Unknown Hospital',
                    //                   style: TextStyle(
                    //                     fontWeight: FontWeight.bold,
                    //                     fontSize: 14,
                    //                   ),
                    //                 ),
                    //                 if (prediction.structuredFormatting?.mainText != null)
                    //                   Text(
                    //                     prediction.structuredFormatting!.mainText ?? '',
                    //                     style: TextStyle(
                    //                       color: Colors.grey.shade600,
                    //                       fontSize: 14,
                    //                     ),
                    //                   ),
                    //               ],
                    //             ),
                    //           ),
                    //         ],
                    //       ),
                    //     );
                    //   } else {
                    //     return SizedBox.shrink();
                    //   }
                    // },
                    itemClick: (Prediction prediction) async {
                      // Check if the selected place has a hospital type or is a regular place
                      if (prediction.types != null && prediction.types!.contains('hospital')) {
                        print("Selected Hospital: ${prediction.description}");
                        controller.text = prediction.description ?? '';

                        try {
                          // Fetch place details using the placeId
                          await fetchPlaceDetails(prediction.placeId!).then((_) {
                            // If it's a hospital, show the hospital details
                            if (selectedHospital != null && selectedHospital!['name'] != null) {
                              showBottomSheet(context); // Show bottom sheet with hospital details
                            }
                          });
                        } catch (e) {
                          print("Error fetching hospital details: $e");
                        }
                      } else {
                        // If it's not a hospital, treat it as a regular place
                        print("Selected Place: ${prediction.description}");
                        controller.text = prediction.description ?? '';

                        // Optionally, you can fetch details about the place if needed
                        try {
                          await fetchPlaceDetails(prediction.placeId!).then((_) {
                            // Show a different UI or details for regular places
                            showBottomSheet(context); // Show place details
                          });
                        } catch (e) {
                          print("Error fetching place details: $e");
                        }
                      }

                      // Hide keyboard after selection
                      SystemChannels.textInput.invokeMethod('TextInput.hide');
                      FocusScope.of(context).unfocus();
                    },
                    itemBuilder: (context, index, Prediction prediction) {
                      return Container(
                        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(10),
                          border: Border(
                            bottom: BorderSide(color: Colors.grey.shade300),
                          ),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              prediction.types != null && prediction.types!.contains('hospital')
                                  ? Icons.local_hospital
                                  : Icons.place,
                              color: prediction.types != null && prediction.types!.contains('hospital')
                                  ? Colors.red
                                  : Colors.blue,
                            ),
                            SizedBox(width: 8),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    prediction.description ?? 'Unknown Place',
                                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                                  ),
                                  if (prediction.structuredFormatting?.mainText != null)
                                    Text(
                                      prediction.structuredFormatting!.mainText ?? '',
                                      style: TextStyle(
                                        color: Colors.grey.shade600,
                                        fontSize: 14,
                                      ),
                                    ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                    isCrossBtnShown: false,
                    boxDecoration: BoxDecoration(
                      borderRadius: BorderRadius.zero
                    ),
                    containerHorizontalPadding: 0,
                  ),
                ),
                Row(
                    children: [
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Color(0xFF3E5A96),
                          shadowColor: Color(0xFF3E5A96),
                          // shadowColor: Colors.white,
                        ),
                        onPressed:(){
                          Navigator.push(context,
                              MaterialPageRoute(builder: (context)=>neworgan(selectedHospital:null))
                          );
                        },
                        child:  Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                      Icon(
                      Icons.add,
                      color: Colors.white,
                      size: 13,
                      ),
                        Text(
                          'Add Manual',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.white),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1, // Ensure one line
                                ),
                              ],
                      ),
                      ),
                           if (isMapDragged==true)
                             SizedBox(width:2),
                             ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          shadowColor: Color(0xFF3E5A96),
                        ),
                        onPressed: () {
                          mapController?.animateCamera(
                            CameraUpdate.newLatLng(currentLocation!),
                          );
                          print("Button pressed to adjust to the current view");
                          fetchNearbyHospitals(10);
                        },

                        child: Text('See this area',style: TextStyle(color: Colors.black),),
                      ),
                    ],
                  ),
              ],
            )),
            Positioned(
              bottom: MediaQuery.of(context).viewInsets.bottom == 0
                  ? 60
                  : MediaQuery.of(context).viewInsets.top + 30,
              // top: 580,
              // bottom:20,
              right: 10,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  FloatingActionButton(
                    heroTag: "myLocation",
                    backgroundColor: Colors.white,
                    onPressed: () async {
                      await _setCurrentLocation();
              
                      if (currentLocation != null) {
                        if (mapController != null) {
                          mapController!.animateCamera(
                            CameraUpdate.newLatLng(currentLocation!),
                          );
                        } else {
                          print("MapController is null.");
                        }
                      } else {
                        print("Current location is not available.");
                      }
              
                      // if (currentLocation != null) {
                      //   CameraUpdate.newLatLng(
                      //     LatLng(currentLocation!.latitude, currentLocation!.longitude),
                      //   );
                      // }
              
                    },
                    child: Icon(Icons.my_location,color: Color(0xFF3E5A96)),
                    mini: true, // Makes the button smaller
                  ),
                  FloatingActionButton(
                    heroTag: "zoomIn",
                    backgroundColor: Colors.white,
                    onPressed: () {
                      mapController?.animateCamera(
                        CameraUpdate.zoomIn(),
                      );
                    },
                    child: Icon(Icons.zoom_in,color: Color(0xFF3E5A96),),
                    mini: true,
                  ),
                  FloatingActionButton(
                    heroTag: "zoomOut",
                    backgroundColor: Colors.white,
                    onPressed: () {
                      mapController?.animateCamera(
                        CameraUpdate.zoomOut(),
                      );
                    },
                    child: Icon(Icons.zoom_out,color: Color(0xFF3E5A96)),
                    mini: true,
                  ),
                ],
              ),
            ),
        ]),
    //   body: Column(
    //     children: [
    //       Padding(
    //         padding: const EdgeInsets.all(8.0),
    //         child:
    //         GooglePlaceAutoCompleteTextField(
    //                 textEditingController: controller,
    //                 googleAPIKey: googleAPIKey,
    //                 inputDecoration: InputDecoration(
    //                   hintText: "Type a location to search",
    //                   prefixIcon: Icon(Icons.search),
    //                   contentPadding: EdgeInsets.symmetric(vertical: 7, horizontal:5),
    //                   isDense: true,
    //                   // contentPadding: EdgeInsets.all(8),
    //                   fillColor: Color(0xFFF8F8F8),
    //                   filled: true,
    //                   enabledBorder: OutlineInputBorder(
    //                     borderSide: BorderSide(color: Colors.transparent),
    //                     borderRadius: BorderRadius.circular(
    //                         10),
    //                   ),
    //                   focusedBorder: OutlineInputBorder(
    //                     borderSide: BorderSide.none,
    //                     borderRadius: BorderRadius.circular(
    //                         10),
    //                   ),
    //                   border: OutlineInputBorder(
    //                     borderSide: BorderSide(color: Colors.transparent),
    //                     borderRadius: BorderRadius.circular(
    //                         10),
    //                   ),
    //                 ),
    //                 debounceTime: 30,
    //                 countries: ["in", "us"],
    //                 isLatLngRequired: true,
    //                itemClick: (Prediction prediction) {
    //                   if (prediction.types != null && prediction.types!.contains('hospital')) {
    //                     print("Selected Hospital: ${prediction.description}");
    //                     controller.text = prediction.description ?? '';
    //                     selectedHospital = {
    //                       'name': prediction.structuredFormatting?.mainText ?? 'Unknown Hospital',
    //                       'vicinity': prediction.description ?? '',
    //                     };
    //                     SystemChannels.textInput.invokeMethod('TextInput.hide');
    //                     FocusScope.of(context).unfocus();
    //                     fetchPlaceDetails(prediction.placeId!);
    //                     fetchNearbyHospitals(sliderValue);
    //                     showBottomSheet(context);
    //                   }
    //                 },
    //                 itemBuilder: (context, index, Prediction prediction) {
    //                   if (prediction.types != null && prediction.types!.contains('hospital')) {
    //                     return Container(
    //                       padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
    //                       decoration: BoxDecoration(
    //                         color: Colors.white,
    //                         border: Border(
    //                           bottom: BorderSide(color: Colors.grey.shade300),
    //                         ),
    //                       ),
    //                       child: Row(
    //                         children: [
    //                           Icon(Icons.local_hospital, color: Colors.red),
    //                           SizedBox(width: 8),
    //                           Expanded(
    //                             child: Column(
    //                               crossAxisAlignment: CrossAxisAlignment.start,
    //                               children: [
    //                                 Text(
    //                                   prediction.description ?? 'Unknown Hospital',
    //                                   // maxLines:4,
    //                                   style: TextStyle(
    //                                     fontWeight: FontWeight.bold,
    //                                     fontSize: 14,
    //                                   ),
    //                                   // overflow: TextOverflow.ellipsis,
    //                                 ),
    //                                 if (prediction.structuredFormatting?.mainText != null)
    //                                   Text(
    //                                     prediction.structuredFormatting!.mainText ?? '',
    //                                     style: TextStyle(
    //                                       color: Colors.grey.shade600,
    //                                       fontSize: 14,
    //                                     ),
    //                                   ),
    //                               ],
    //                             ),
    //                           ),
    //                         ],
    //                       ),
    //                     );
    //                   } else {
    //                     // Return an empty container if it's not a hospital
    //                     return SizedBox.shrink();
    //                   }
    //                 },
    //               ),
    //
    //       ),
    //       /// Map display section
    //       Expanded(
    //         child: currentLocation == null
    //             ?Container(
    //           alignment: Alignment.center,
    //           padding: EdgeInsets.all(16.0),
    //           child: LoadingAnimationWidget.discreteCircle(
    //             color:Color(0xFF3E5A96),
    //             size: 30,
    //             secondRingColor: Colors.purple,
    //           ),)
    //             :GoogleMap(
    //           initialCameraPosition: CameraPosition(
    //             target: currentLocation!,
    //             zoom: 12,
    //           ),
    //           myLocationEnabled: true,
    //           myLocationButtonEnabled: true,
    //           compassEnabled: true,
    //           zoomControlsEnabled: true,
    //           onMapCreated: (controller) {
    //             mapController = controller;
    //             mapController?.animateCamera(
    //               CameraUpdate.newLatLng(currentLocation!),
    //             );
    //           },
    //           markers: Set<Marker>.of([
    //             if (selectedLocation != null)
    //               Marker(
    //                 markerId: MarkerId("selectedHospital"),
    //                 position: selectedLocation!,
    //                 icon: customIcon ?? BitmapDescriptor.defaultMarker,
    //                 // icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),
    //                 onTap: () {
    //                   print("Marker tapped!");
    //                   showBottomSheet(context);
    //                   },
    //                   ),
    //             ..._hospitalMarkers,
    //           ]),
    //         ),
    //         // GoogleMap(
    // //           initialCameraPosition: CameraPosition(
    // //             target: currentLocation!,
    // //             zoom: 12,
    // //           ),
    // //           onMapCreated: (controller) {
    // //             mapController = controller;
    // //             // Animate camera to ensure it stays updated on currentLocation
    // //             mapController?.animateCamera(
    // //               CameraUpdate.newLatLng(currentLocation!),
    // //             );
    // //           },
    // //           markers: Set<Marker>.of([
    // //             if (selectedLocation != null)
    // //               Marker(
    // //                 markerId: MarkerId("selectedLocation"),
    // //                 position: selectedLocation!,
    // //               icon: BitmapDescriptor.defaultMarkerWithHue(
    // //                      BitmapDescriptor.hueBlue),
    // //               ),
    // //             ..._hospitalMarkers, // Add hospital markers here
    // //           ]),
    // //           // // // onMapCreated: (controller) => mapController = controller,
    // //           // // markers: {
    // //           // //   if (selectedLocation != null)
    // //           // //     Marker(
    // //           // //       markerId: MarkerId("selectedLocation"),
    // //           // //       position: selectedLocation!,
    // //           // //     ),
    // //           // //   // if (currentLocation != null)
    // //           // //   //   Marker(
    // //           // //   //     markerId: MarkerId("currentLocation"),
    // //           // //   //     position: currentLocation!,
    // //           // //   //     icon: BitmapDescriptor.defaultMarkerWithHue(
    // //           // //   //         BitmapDescriptor.hueAzure),
    // //           // //   //   ),
    // //           // },
    // //         ),
    //       ),
    //
    //     ],
    //   ),
    );
  }}
